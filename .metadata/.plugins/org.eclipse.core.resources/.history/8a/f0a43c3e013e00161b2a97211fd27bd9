package com.example;

import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional
public class CustomerRepository {
	
	@Autowired
	NamedParameterJdbcTemplate jdbcTemplate;
	SimpleJdbcInsert insert;
	
	@PostConstruct
	public void init() {
		insert = new SimpleJdbcInsert((JdbcTemplate) jdbcTemplate.getJdbcOperations())
				.withTableName("customers")
				.usingGeneratedKeyColumns("id");
	}
	
	
	private static final RowMapper<Customer> customerRowMapper = (rs, i) -> {
		Integer id = rs.getInt("id");
		String firstName = rs.getString("first_name");
		String lastName = rs.getString("last_name");
		
		return new Customer(id, firstName, lastName);
	};
	
	public List<Customer> findAll() {
		String sql = "SELECT id, first_name, last_name FROM customers ORDER BY id";
		List<Customer> customers = jdbcTemplate.query(sql, customerRowMapper);
		
		return customers;
	}
	
	public Customer findOne(Integer id) {
		String sql = "SELECT * from customers WHERE id = :id";
		SqlParameterSource param = new MapSqlParameterSource()
				.addValue("id", id);
		
		return jdbcTemplate.queryForObject(sql, param, customerRowMapper);
	}
	
	public Customer save(Customer customer) {
		SqlParameterSource param = new BeanPropertySqlParameterSource(customer);
		if(customer.getId() == null) {
			String sql = "INSERT INTO customers (first_name, last_name) VALUES (:firstName, :lastName)";
			jdbcTemplate.update(sql, param);
		} else {
			String sql = "UPDATE customers SET first_name=:firstName, last_name=:lastName WHERE id=:id";
			jdbcTemplate.update(sql, param);
		}
		
		return customer;
	}

	public void delete(Integer id) {
		String sql = "DELETE FROM customers WHERE id = :id";
		SqlParameterSource param = new MapSqlParameterSource()
				.addValue("id", id);
		jdbcTemplate.update(sql, param);
	}
	
}
